#
# File:     .bash_fzf
# Author:   Heiko Klausing (h.klausing@gmx.de)
# Created:  2017-04-08
#
# Fuzzy Finder Helper Functions
#
# Most of the functions are taken from https://github.com/junegunn/fzf/wiki/examples
#

#hk skip=0
#hk inst_package=0
#hk
#hk # Check if fzf package is installed or a self compiled version is used
#hk fzf_path=$(type -p fzf)
#hk
#hk # Test if Fuzzy Finder is installed
#hk if [[ -z ${fzf_path} ]]; then
#hk
#hk     fzf_path=/home/$USER/.fzf/bin
#hk     if [[ ! -f ${fzf_path}/fzf ]]; then
#hk
#hk         echo "fzf - FuZzy Finder not found."
#hk         skip=1
#hk
#hk     fi
#hk fi
#hk
#hk if [[ ${fzf_path} =~ usr ]]; then
#hk
#hk     inst_package=1
#hk
#hk else
#hk
#hk     # If fzf is self compiled and existing than add directory to PATH
#hk     # ---------
#hk     if [[ ! "$PATH" == *${fzf_path}* ]]; then
#hk       export PATH="$PATH:${fzf_path}"
#hk     fi
#hk
#hk fi
#hk
#hk
#hk # Test if Fuzzy Finder TMUX is installed
#hk if [[ -z "$(type -p fzf-tmux)" ]]; then
#hk     echo "fzf-tmux - FuZzy Finder TMUX not found."
#hk     skip=1
#hk fi

# Setup fzf

#----------------------------
#
# Skip following commands if Fuzzy File Finder is not installed
#
#hk if [[ $skip -eq 0 ]]; then
#hk
#hk     if [[ $inst_package -eq 1 ]]; then
#hk
#hk         if [[ -f /usr/share/fzf/completion.bash ]]; then
#hk             source /usr/share/fzf/completion.bash 2> /dev/null
#hk         fi
#hk
#hk         if [[ -f /usr/share/fzf/completion.bash ]]; then
#hk             source /usr/share/fzf/key-bindings.bash 2> /dev/null
#hk         fi
#hk
#hk     else
#hk
#hk         # Man path
#hk         # --------
#hk         if [[ ! "$MANPATH" == */home/$USER/.fzf/man* && -d "/home/USER/.fzf/man" ]]; then
#hk           export MANPATH="$MANPATH:/home/$USER/.fzf/man"
#hk         fi
#hk
#hk         # Auto-completion
#hk         # ---------------
#hk         [[ $- == *i* ]] && source "/home/$USER/.fzf/shell/completion.bash" 2> /dev/null
#hk
#hk         # Key bindings
#hk         # ------------
#hk         key_bindings=/usr/share/fzf/key-bindings.bash
#hk         if [[ ! -f ${key_bindings} ]]; then
#hk             key_binding=/home/$USER/.fzf/shell/key-bindings.bash
#hk         fi
#hk         source "/home/$USER/.fzf/shell/key-bindings.bash"
#hk
#hk     fi
#hk
#hk
#hk     #----------------------------
#hk     # Opening files
#hk     #
#hk
#hk     # fze [FUZZY PATTERN] - Open the selected file(s) with the default editor
#hk     #   - Bypass fuzzy finder if there's only one match (--select-1)
#hk     #   - Exit if there's no match (--exit-0)
#hk     fze() {
#hk       local files
#hk       IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
#hk       [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
#hk     }
#hk
#hk
#hk
#hk    #----------------------------
#hk    # Changing directory
#hk    #
#hk
#hk    # fzgd - FuZzy Get Directory, print selected directory
#hk    fzgd() {
#hk      local dir
#hk      dir=$(find ${1:-.} -path '*/\.*' -prune \
#hk                      -o -type d -print 2> /dev/null | fzf +m) &&
#hk      echo -n "$dir"
#hk    }
#hk
#hk    # fzd - FuZzy Directory, cd to selected directory
#hk    fzd() {
#hk      local dir
#hk      dir=$(find ${1:-.} -path '*/\.*' -prune \
#hk                      -o -type d -print 2> /dev/null | fzf +m) &&
#hk      cd "$dir"
#hk    }
#hk
#hk    # fzda - FuZzy Directory Also dot, including hidden directories
#hk    fzda() {
#hk      local dir
#hk      dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
#hk    }
#hk
#hk    # fzdr - FuZzy Directory Recursive, cd to selected parent directory
#hk    fzdr() {
#hk      local declare dirs=()
#hk      get_parent_dirs() {
#hk        if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
#hk        if [[ "${1}" == '/' ]]; then
#hk          for _dir in "${dirs[@]}"; do echo $_dir; done
#hk        else
#hk          get_parent_dirs $(dirname "$1")
#hk        fi
#hk      }
#hk      local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
#hk      cd "$DIR"
#hk    }
#hk
#hk    # Suggested by @harelba and @dimonomid:
#hk
#hk    # fzcdf - FuZzy Change Directory to selected File
#hk    fzcdf() {
#hk       local file
#hk       local dir
#hk       file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
#hk    }
#hk
#hk
#hk     #----------------------------
#hk     # Command history
#hk     #
#hk
#hk     # fzh - Fuzzy History
#hk     fzh() {
#hk       eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
#hk     }
#hk
#hk
#hk
#hk     #----------------------------
#hk     # Processes
#hk     #
#hk
#hk     # fzkill - FuZzy KILL process
#hk     fzkill() {
#hk       local pid
#hk       pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
#hk
#hk       if [ "x$pid" != "x" ]
#hk       then
#hk         echo $pid | xargs kill -${1:-9}
#hk       fi
#hk     }
#hk
#hk
#hk    #----------------------------
#hk    # Git
#hk    #
#hk
#hk    # fzbr - FuZzy checkout git Branch (including remote branches)
#hk    fzbr() {
#hk      local branches branch
#hk      branches=$(git branch --all | grep -v HEAD) &&
#hk      branch=$(echo "$branches" |
#hk               fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
#hk      git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
#hk    }
#hk
#hk
#hk     # fzco - FuZzy Checkout git Branch/Tag
#hk     fzcbt() {
#hk       local tags branches target
#hk       tags=$(
#hk         git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
#hk       branches=$(
#hk         git branch --all | grep -v HEAD             |
#hk         sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
#hk         sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
#hk       target=$(
#hk         (echo "$tags"; echo "$branches") |
#hk         fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
#hk       git checkout $(echo "$target" | awk '{print $2}')
#hk     }
#hk
#hk
#hk     # fzshow - FuZzy SHOW git commit browser
#hk     fzshow() {
#hk       git log --graph --color=always \
#hk           --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#hk       fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
#hk           --bind "ctrl-m:execute:
#hk                     (grep -o '[a-f0-9]\{7\}' | head -1 |
#hk                     xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#hk                     {}
#hk     FZF-EOF"
#hk     }
#hk
#hk
#hk     # fzcs - FuZzy get git Commit Sha values
#hk     # example usage: git rebase -i `fzcs`
#hk     fzcs() {
#hk       local commits commit
#hk       commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
#hk       commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
#hk       echo -n $(echo "$commit" | sed "s/ .*//")
#hk     }
#hk
#hk     # fzstash - FuZzy easier way to deal with sTASHes
#hk     # type fstash to get a list of your stashes
#hk     # enter shows you the contents of the stash
#hk     # ctrl-d shows a diff of the stash against your current HEAD
#hk     # ctrl-b checks the stash out as a branch, for easier merging
#hk     fzstash() {
#hk       local out q k sha
#hk       while out=$(
#hk         git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
#hk         fzf --ansi --no-sort --query="$q" --print-query \
#hk             --expect=ctrl-d,ctrl-b);
#hk       do
#hk         mapfile -t out <<< "$out"
#hk         q="${out[0]}"
#hk         k="${out[1]}"
#hk         sha="${out[-1]}"
#hk         sha="${sha%% *}"
#hk         [[ -z "$sha" ]] && continue
#hk         if [[ "$k" == 'ctrl-d' ]]; then
#hk           git diff $sha
#hk         elif [[ "$k" == 'ctrl-b' ]]; then
#hk           git stash branch "stash-$sha" $sha
#hk           break;
#hk         else
#hk           git stash show -p $sha
#hk         fi
#hk       done
#hk     }
#hk
#hk
#hk     #----------------------------
#hk     # Tags
#hk     #
#hk
#hk     # fztags - FuZzy search cTAGS
#hk     fztags() {
#hk       local line
#hk       [ -e tags ] &&
#hk       line=$(
#hk         awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
#hk         cut -c1-80 | fzf --nth=1,2
#hk       ) && ${EDITOR:-vim} $(cut -f3 <<< "$line") -c "set nocst" \
#hk                                           -c "silent tag $(cut -f2 <<< "$line")"
#hk     }
#hk
#hk
#hk     #----------------------------
#hk     # vim
#hk     #
#hk
#hk     # Inspired by v. Opens files in ~/.viminfo
#hk
#hk     # fzv - FuZzy open files stored in ~/.viminfo with Vim
#hk     fzv() {
#hk       local files
#hk       files=$(grep '^>' ~/.viminfo | cut -c3- |
#hk               while read line; do
#hk                 [ -f "${line/\~/$HOME}" ] && echo "$line"
#hk               done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#hk     }
#hk
#hk     # fzgv - FuZzy open files stored in ~/.viminfo with GVim
#hk     fzgv() {
#hk       local files
#hk       files=$(grep '^>' ~/.viminfo | cut -c3- |
#hk               while read line; do
#hk                 [ -f "${line/\~/$HOME}" ] && echo "$line"
#hk               done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#hk     }
#hk
#hk
#hk     #----------------------------
#hk     # FZ-Helper overview
#hk     fzhelp() {
#hk         cat << "EOT"
#hk fz-Helper Functions
#hk
#hk ** Directory **
#hk - fzcdf         FuZzy Change Directory to selected File
#hk - fzd           FuZzy Directory, cd to selected directory
#hk - fzda          FuZzy Directory Also dot, including hidden directories
#hk - fzdr          FuZzy Directory Recursive, cd to selected parent directory
#hk - fze [PATTERN] Open the selected file(s) with the default editor
#hk - fzgd          FuZzy Get Directory, print selected directory
#hk
#hk ** History **
#hk - fzh           Fuzzy History
#hk
#hk ** Kill Process **
#hk - fzkill        FuZzy KILL process
#hk
#hk ** Git **
#hk - fzbr          FuZzy checkout git Branch (including remote branches)
#hk - fzco          FuZzy Checkout git Branch/Tag
#hk - fzcs          FuZzy get git Commit Sha values; example usage: git rebase -i `fzcs`
#hk - fzshow        FuZzy SHOW git commit browser
#hk - fzstash       FuZzy easier way to deal with sTASHes
#hk
#hk ** Ctags **
#hk - fztags        FuZzy search cTAGS
#hk
#hk ** vim/gim **
#hk - fzgv          FuZzy open files stored in ~/.viminfo with GVim
#hk - fzv           FuZzy open files stored in ~/.viminfo with Vim
#hk EOT
#hk     }
#hk
#hk fi      # if [[ $skip -eq 0 ]]; then
#hk


# vim: filetype=sh
