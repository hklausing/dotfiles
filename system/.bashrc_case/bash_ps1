#
# ~/.bashrc_case/bash_ps1
#

## Change the window title of X terminals
#case ${TERM} in
#    xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
#        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'
#        ;;
#    screen*)
#        PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\033\\"'
#        ;;
#esac

# functional color codes
C_NORM=${COL_Norm}
C_DIVIDER=${COL_F16DarkGray}
C_DIV=${COL_WHITE}                   # user host divider
C_RCODE=${COL_BGRED}
C_TIME=${COL_RED}
C_DIR=${COL_YELLOW}
C_USER=${COL_BLUE}
C_HOST=${COL_LGREEN}
C_PROMT=${COL_Bold}${COL_F16White}


if [[ -r /home/$USER/.git-prompt.sh ]]; then
    . /home/$USER/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
fi

__prompt_command_basic()
{
    # no color prompt string
    local ps=''
    ps+="\u"                            # user
    ps+="@"                             # divider
    ps+="\h"                            # host
    ps+=" \w"                           # current directory
    ps+=" \$ "                          # input prompt
    PS1=${ps}
}

__prompt_command_1()
{
    # color prompt with recall issue (number will be kept in string)
    local EXIT_CODE=$?
    local ps="${C_DIVIDER}"

    if [[ $EXIT_CODE -ne 0 ]]; then
        # return code is not 0, visualize it
        ps="${COL_BGRED} ${EXIT_CODE} ${C_NORM}${C_DIVIDER}"
    fi

    ps+="(${C_USER}\u"                          # user
    ps+="${C_DIV}@"                             # divider
    ps+="${C_HOST}\h${C_NORM}${C_DIVIDER})"     # host
    ps+="-(${C_TIME}\t${C_DIVIDER})"            # current time

    # if git prompt tool was found than change the the prompt related to the found path
    if [[ ${GIT_PS1_SHOWDIRTYSTATE} -eq 1 ]]; then
        # Define bash prompt for git branch information
        ps+="\$(__git_ps1 \"($COL_CYAN%s${C_DIVIDER})-\")"   # current branch name if git path
    fi

    ps+="\n"                                    # new line
    ps+="(${C_DIR}\w${C_DIVIDER})-"             # current directory
    ps+="\n${C_NORM} \$ "
    PS1=${ps}
}

__prompt_command_color()
{
    # exit code, user, host, git and current directory without colors
    local EXIT_CODE=$?
    local ps=""

    if [[ $EXIT_CODE -ne 0 ]]; then
        # return code is not 0, visualize it
        ps="${COLBG_Red} ${EXIT_CODE} ${COLBG_Off}"
    fi

    ps+="${COL_DarkGray}("                          # divider
    ps+="${COL_Blue}\u"                             # user
    ps+="${COL_DarkGray}@"                          # divider
    ps+="${COL_Green}\h"                            # host
    ps+="${COL_DarkGray})-("                        # divider
    ps+="${COL_Brown}\t"                            # current time
    ps+="${COL_DarkGray})"                          # divider

    # if git prompt tool was found than change the the prompt related to the found path
    if [[ ${GIT_PS1_SHOWDIRTYSTATE} -eq 1 ]]; then
        # Define bash prompt for git branch information
        ps+="-("
        ps+="${COL_Magenta}\$(__git_ps1 \"%s\")"    # current branch name if git path
        ps+="${COL_DarkGray})"
    fi

    ps+="\n"                                        # new line
    ps+=" ${COL_Yellow}\w"                          # current directory
    ps+="${COL_Default}\n"                          # new line
    ps+="\$ ${COL_Default}"                         # input prompt
    PS1=${ps}
}

__prompt_command_nocolor()
{
    # exit code, user, host, git and current directory without colors
    local EXIT_CODE=$?
    local ps=""

    if [[ $EXIT_CODE -ne 0 ]]; then
        # return code is not 0, visualize it
        ps="{ ${EXIT_CODE} }"
    fi

    ps+="(\u"                          # user
    ps+="@"                             # divider
    ps+="\h)"     # host
    ps+="-(\t)"            # current time

    # if git prompt tool was found than change the the prompt related to the found path
    if [[ ${GIT_PS1_SHOWDIRTYSTATE} -eq 1 ]]; then
        # Define bash prompt for git branch information
        ps+="\$(__git_ps1 \"(%s)-\")"   # current branch name if git path
    fi

    ps+="\n"                                    # new line
    ps+="(\w)-"             # current directory
    ps+="\n \$ "
    PS1=${ps}
}

# redefine prompt_command to get customized version
#PROMPT_COMMAND=__prompt_command
PROMPT_COMMAND=__prompt_command_color
#PROMPT_COMMAND=__prompt_command_nocolor
#PROMPT_COMMAND=__prompt_command_basic

# vim: set filetype=bash:
