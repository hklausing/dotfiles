#
# ~/.bashrc_case/bash_ps1
#


if [[ -r /home/$USER/.git-prompt.sh ]]; then
    . /home/$USER/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
fi

__prompt_command_basic()
{
    # no color prompt string
    local ps=''
    ps+="\u"                            # user
    ps+="@"                             # divider
    ps+="\h"                            # host
    ps+=" \w"                           # current directory
    ps+=" \$ "                          # input prompt
    PS1=${ps}
}

__prompt_command_color()
{
    # exit code, user, host, git and current directory without colors
    local EXIT_CODE=$?
    local ps=""

    if [[ $EXIT_CODE -ne 0 ]]; then
        # return code is not 0, visualize it
        ps="${COLBG_Red} ${EXIT_CODE} ${COLBG_Off}"
    fi

    ps+="${COL_DarkGray}("                          # divider
    ps+="${COL_F16LightBlue}\u"                     # user
    ps+="${COL_DarkGray}@"                          # divider
    ps+="${COL_Green}\h"                            # host
    ps+="${COL_DarkGray})-("                        # divider
    ps+="${COL_Brown}\t"                            # current time
    ps+="${COL_DarkGray})"                          # divider

    # if git prompt tool was found than change the the prompt related to the found path
    if [[ ${GIT_PS1_SHOWDIRTYSTATE} -eq 1 ]]; then
        # Define bash prompt for git branch information
        ps+="-("
        ps+="${COL_Magenta}\$(__git_ps1 \"%s\")"    # current branch name if git path
        ps+="${COL_DarkGray})"
    fi

    ps+="\n"                                        # new line
    ps+=" ${COL_Yellow}\w"                          # current directory
    ps+="${COL_Default}\n"                          # new line
    ps+="\$ ${COL_Default}"                         # input prompt
    PS1=${ps}
}

__prompt_command_nocolor()
{
    # exit code, user, host, git and current directory without colors
    local EXIT_CODE=$?
    local ps=""

    if [[ $EXIT_CODE -ne 0 ]]; then
        # return code is not 0, visualize it
        ps="{ ${EXIT_CODE} }"
    fi

    ps+="(\u"                          # user
    ps+="@"                             # divider
    ps+="\h)"     # host
    ps+="-(\t)"            # current time

    # if git prompt tool was found than change the the prompt related to the found path
    if [[ ${GIT_PS1_SHOWDIRTYSTATE} -eq 1 ]]; then
        # Define bash prompt for git branch information
        ps+="\$(__git_ps1 \"(%s)-\")"   # current branch name if git path
    fi

    ps+="\n"                                    # new line
    ps+="(\w)-"             # current directory
    ps+="\n \$ "
    PS1=${ps}
}

# redefine prompt_command to get customized version
PROMPT_COMMAND=__prompt_command_color
#PROMPT_COMMAND=__prompt_command_nocolor
#PROMPT_COMMAND=__prompt_command_basic

# vim: set filetype=bash:
