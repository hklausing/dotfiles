#
# ~/.bashrc_case/bash_functions
#


# extract - extract files. Ignore files with improper extensions.
# Usage: extract file.zip [file2.bz2 ..]
extract () {
    local x
    # echo and execute
    ee() {
        echo "$@"
        $1 "$2"
    }
    for x in "$@"; do
        [[ -f $x ]] || continue
        case "$x" in
            *.tar.bz2 | *.tbz2 )    ee "tar xvjf" "$x"  ;;
            *.tar.gz | *.tgz )      ee "tar xvzf" "$x"  ;;
            *.bz2 )                 ee "bunzip2" "$x"   ;;
            *.rar )                 ee "unrar x" "$x"   ;;
            *.gz )                  ee "gunzip" "$x"    ;;
            *.tar )                 ee "tar xvf" "$x"   ;;
            *.zip )                 ee "unzip" "$x"     ;;
            *.Z )                   ee "uncompress" "$x";;
            *.7z )                  ee "7z x" "$x"      ;;
        esac
    done
}


# colors - print a color list
# usage: colors
colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black

            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}

            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
        echo; echo
    done
}



# colors_and_formatting - displays possible combinations of color attributs
# usage: colors_and_formatting
colors_and_formatting() {
  # This program is free software. It comes without any warranty, to
  # the extent permitted by applicable law. You can redistribute it
  # and/or modify it under the terms of the Do What The Fuck You Want
  # To Public License, Version 2, as published by Sam Hocevar. See
  # http://sam.zoy.org/wtfpl/COPYING for more details.

  #Background
  for clbg in {40..47} {100..107} 49 ; do
    #Foreground
    for clfg in {30..37} {90..97} 39 ; do
      #Formatting
      for attr in 0 1 2 4 5 7 ; do
        #Print the result
        echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
      done
      echo #Newline
    done
  done
}


# 256-colors - display the 256 colors available
# usage: 256-colors
256-colors() {
  # This program is free software. It comes without any warranty, to
  # the extent permitted by applicable law. You can redistribute it
  # and/or modify it under the terms of the Do What The Fuck You Want
  # To Public License, Version 2, as published by Sam Hocevar. See
  # http://sam.zoy.org/wtfpl/COPYING for more details.

  for fgbg in 38 48 ; do # Foreground / Background
    for color in {0..255} ; do # Colors
      # Display the color
      printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
      # Display 6 colors per lines
      if [ $((($color + 1) % 6)) == 4 ] ; then
        echo # New line
      fi
    done
    echo # New line
  done
}


# color-tests - Terminal colors
# usage: colors-test
color-tests() {
    echo ; echo -n "Current used colors (via tput): " ; tput colors ; echo
    for x in 0 1 2 4 5 7 8; do
        [[ $x -eq 0 ]] && echo "Attribute: norm ($x)"
        [[ $x -eq 1 ]] && echo "Attribute: bold ($x)"
        [[ $x -eq 2 ]] && echo "Attribute: dim ($x)"
        [[ $x -eq 4 ]] && echo "Attribute: underlined ($x)"
        [[ $x -eq 5 ]] && echo "Attribute: blink ($x)"
        [[ $x -eq 6 ]] && echo "Attribute: blink ($x)"
        [[ $x -eq 7 ]] && echo "Attribute: reverse ($x)"
        [[ $x -eq 8 ]] && echo "Attribute: hidden ($x)"
        for i in `seq 30 37`; do
            for a in `seq 40 47`; do
                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
            done
            echo
        done
    done
    echo ""
}


# history-cleanup - removes duoble entries from the history file
# usage: history-cleanup
history-cleanup() {
    /bin/cp ~/.bash_history ~/.bash_history.$(date +%Y%m%dT%H%M%S)
    grep -vP "^(h|history) -d \d+" ~/.bash_history | tac | awk "!x[\$0]++" | tac > ~/.bash-history
    [[ -f ~/.bash-history ]] && mv ~/.bash-history ~/.bash_history
}


# mc - Create and change to new directory
# usage: mcd DIRECTORY_NAME
mcd () {
    # Create a directory and than change to it
    # e.g. mcd ~/demodir
    #      creates a ~/demodir directory and change to it
    [[ -z "$1" ]] && echo "usage: mcd <directory>" && return
    mkdir -p $1
    if [[ -d $1 ]]; then
        cd $1
    else
        error "ERROR: mcd: $1: directory not created!"
    fi
}


ccd() {
    # concatenate names and change to that directory
    # e.g. ccd /home heiko data
    #      this will change directory to /home/heiko/data
    #      equal to ccd ~ data
    local targetdir=
    for item in "$@"; do
        if [[ -z ${targetdir} ]]; then
            targetdir=${item}
        else
            targetdir=${targetdir}/${item}
        fi
    done
    if [[ -d "${targetdir}" ]]; then
        cd "${targetdir}"
    else
        echo "ERROR: ccd: ${targetdir}: directory not found!"
    fi
}

# vim: set filetype=bash:
