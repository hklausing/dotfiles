#
# ~/.bashrc_case/bash_fzf
#


#===========================
#=== FuzzyFind Functions ===

# for following functions fuzzy finder must be available
if type -p fzf >/dev/null; then

    # load completions
    if [[ -f /usr/share/fzf/completion.bash ]]; then
        source /usr/share/fzf/completion.bash 2> /dev/null
    fi

    # load key bindings
    if [[ -f /usr/share/fzf/key-bindings.bash ]]; then
        source /usr/share/fzf/key-bindings.bash 2> /dev/null
    fi

    # fp - Find Process
    #   usage: fp
    # Select one or multiple processes
    fp() {
        ps waux | fzf +s --multi
    }


    # killp - Kill Process[es]
    #   usage: killp [QUERY] [-SIGNAL]
    # Select one or multiple processes
    killp() {
        local QUERY=
        local SIGNAL=
        [[ "$#" -eq 1 && ${1:0:1} != '-' ]] && QUERY=${1}
        [[ "$#" -eq 1 && ${1:0:1} == '-' ]] && SIGNAL=${1}
        [[ "$#" -eq 2 ]] && { QUERY=${1}; SIGNAL=${2}; }
        ps -ef | sed 1d | fzf --multi --query=${QUERY} | awk '{print $2}' | xargs kill ${SIGNAL} ;
    }


    # preview - Pre View file content
    #   usage: preview
    # Select one or multiple processes
    preview() {
        fzf --multi --preview="head -$LINES {}"
    }


    # fshow - git commit browser
    fshow() {
      local out sha q
      while out=$(
          git log --graph --color=always \
              --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
          fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
        q=$(head -1 <<< "$out")
        while read sha; do
          git show --color=always $sha | less -R
        done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
      done
    }

    #----------------------------
    # Opening files
    #

    # fze [FUZZY PATTERN] - Open the selected file(s) with the default editor
    #   - Bypass fuzzy finder if there's only one match (--select-1)
    #   - Exit if there's no match (--exit-0)
    fze() {
      local files
      IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
      [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
    }



    #----------------------------
    # Changing directory
    #

    # fzgd - FuZzy Get Directory, print selected directory
    fzgd() {
      local dir
      dir=$(find ${1:-.} -path '*/\.*' -prune \
                      -o -type d -print 2> /dev/null | fzf +m) &&
      echo -n "$dir"
    }


    # fzd - FuZzy Directory, cd to selected directory
    fzd() {
      local dir
      dir=$(find ${1:-.} -path '*/\.*' -prune \
                      -o -type d -print 2> /dev/null | fzf +m) &&
      cd "$dir"
    }


    # fzda - FuZzy Directory Also dot, including hidden directories
    fzda() {
      local dir
      dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
    }


    # fzdr - FuZzy Directory Recursive, cd to selected parent directory
    fzdr() {
      local declare dirs=()
      get_parent_dirs() {
        if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
        if [[ "${1}" == '/' ]]; then
          for _dir in "${dirs[@]}"; do echo $_dir; done
        else
          get_parent_dirs $(dirname "$1")
        fi
      }
      local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
      cd "$DIR"
    }


    # Suggested by @harelba and @dimonomid:

    # fzcdf - FuZzy Change Directory to selected File
    fzcdf() {
       local file
       local dir
       file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
    }


    #----------------------------
    # Command history
    #

    # fzh - Fuzzy History
    fzh() {
      eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
    }


    #----------------------------
    # Processes
    #

    # fzkill - FuZzy KILL process
    fzkill() {
      local pid
      pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

      if [ "x$pid" != "x" ]
      then
        echo $pid | xargs kill -${1:-9}
      fi
    }


    #----------------------------
    # Git
    #

    # fzbr - FuZzy checkout git Branch (including remote branches)
    fzbr() {
      local branches branch
      branches=$(git branch --all | grep -v HEAD) &&
      branch=$(echo "$branches" |
               fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
      git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
    }


    # fzco - FuZzy Checkout git Branch/Tag
    fzcbt() {
      local tags branches target
      tags=$(
        git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
      branches=$(
        git branch --all | grep -v HEAD             |
        sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
        sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
      target=$(
        (echo "$tags"; echo "$branches") |
        fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
      git checkout $(echo "$target" | awk '{print $2}')
    }


    # fzshow - FuZzy SHOW git commit browser
    fzshow() {
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
          --bind "ctrl-m:execute:
                    (grep -o '[a-f0-9]\{7\}' | head -1 |
                    xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                    {}
    FZF-EOF"
    }


    # fzcs - FuZzy get git Commit Sha values
    # example usage: git rebase -i `fzcs`
    fzcs() {
      local commits commit
      commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
      commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
      echo -n $(echo "$commit" | sed "s/ .*//")
    }


    # fzstash - FuZzy easier way to deal with sTASHes
    # type fstash to get a list of your stashes
    # enter shows you the contents of the stash
    # ctrl-d shows a diff of the stash against your current HEAD
    # ctrl-b checks the stash out as a branch, for easier merging
    fzstash() {
      local out q k sha
      while out=$(
        git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
        fzf --ansi --no-sort --query="$q" --print-query \
            --expect=ctrl-d,ctrl-b);
      do
        mapfile -t out <<< "$out"
        q="${out[0]}"
        k="${out[1]}"
        sha="${out[-1]}"
        sha="${sha%% *}"
        [[ -z "$sha" ]] && continue
        if [[ "$k" == 'ctrl-d' ]]; then
          git diff $sha
        elif [[ "$k" == 'ctrl-b' ]]; then
          git stash branch "stash-$sha" $sha
          break;
        else
          git stash show -p $sha
        fi
      done
    }


    #----------------------------
    # Tags
    #

    # fztags - FuZzy search cTAGS
    fztags() {
      local line
      [ -e tags ] &&
      line=$(
        awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
        cut -c1-80 | fzf --nth=1,2
      ) && ${EDITOR:-vim} $(cut -f3 <<< "$line") -c "set nocst" \
                                          -c "silent tag $(cut -f2 <<< "$line")"
    }


    #----------------------------
    # vim
    #

    # Inspired by v. Opens files in ~/.viminfo

    # fzv - FuZzy open files stored in ~/.viminfo with Vim
    fzv() {
      local files
      files=$(grep '^>' ~/.viminfo | cut -c3- |
              while read line; do
                [ -f "${line/\~/$HOME}" ] && echo "$line"
              done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
    }

    # fzgv - FuZzy open files stored in ~/.viminfo with GVim
    fzgv() {
      local files
      files=$(grep '^>' ~/.viminfo | cut -c3- |
              while read line; do
                [ -f "${line/\~/$HOME}" ] && echo "$line"
              done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
    }


    #----------------------------
    # FZ-Helper overview
    fzhelp() {
        cat <<- "EOT"
            fz-Helper Functions

            ** Directory **
            - fzcdf         FuZzy Change Directory to selected File
            - fzd           FuZzy Directory, cd to selected directory
            - fzda          FuZzy Directory Also dot, including hidden directories
            - fzdr          FuZzy Directory Recursive, cd to selected parent directory
            - fze [PATTERN] Open the selected file(s) with the default editor
            - fzgd          FuZzy Get Directory, print selected directory

            ** History **
            - fzh           Fuzzy History

            ** Kill Process **
            - fzkill        FuZzy KILL process

            ** Git **
            - fzbr          FuZzy checkout git Branch (including remote branches)
            - fzco          FuZzy Checkout git Branch/Tag
            - fzcs          FuZzy get git Commit Sha values; example usage: git rebase -i `fzcs`
            - fzshow        FuZzy SHOW git commit browser
            - fzstash       FuZzy easier way to deal with sTASHes

            ** Ctags **
            - fztags        FuZzy search cTAGS

            ** vim/gim **
            - fzgv          FuZzy open files stored in ~/.viminfo with GVim
            - fzv           FuZzy open files stored in ~/.viminfo with Vim
            EOT
    }

fi      # end of if type -p fzf >/dev/null; then




#hk #===========================
#hk #=== FuzzyFind Functions ===
#hk
#hk # for following functions fuzzy finder must be available
#hk if type -p fzf >/dev/null; then
#hk
#hk     # fp - Find Process
#hk     #   usage: fp
#hk     # Select one or multiple processes
#hk     fp() {
#hk         ps waux | fzf +s --multi
#hk     }
#hk
#hk
#hk     # killp - Kill Process[es]
#hk     #   usage: killp [QUERY] [-SIGNAL]
#hk     # Select one or multiple processes
#hk     killp() {
#hk         local QUERY=
#hk         local SIGNAL=
#hk         [[ "$#" -eq 1 && ${1:0:1} != '-' ]] && QUERY=${1}
#hk         [[ "$#" -eq 1 && ${1:0:1} == '-' ]] && SIGNAL=${1}
#hk         [[ "$#" -eq 2 ]] && { QUERY=${1}; SIGNAL=${2}; }
#hk         ps -ef | sed 1d | fzf --multi --query=${QUERY} | awk '{print $2}' | xargs kill ${SIGNAL} ;
#hk     }
#hk
#hk
#hk     # preview - Pre View file content
#hk     #   usage: preview
#hk     # Select one or multiple processes
#hk     preview() {
#hk         fzf --multi --preview="head -$LINES {}"
#hk     }
#hk
#hk
#hk     # fshow - git commit browser
#hk     fshow() {
#hk       local out sha q
#hk       while out=$(
#hk           git log --graph --color=always \
#hk               --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#hk           fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
#hk         q=$(head -1 <<< "$out")
#hk         while read sha; do
#hk           git show --color=always $sha | less -R
#hk         done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
#hk       done
#hk     }
#hk
#hk     # load Fuzzy File Finder tool and realated helpers
#hk #   [[ -r ~/.bash_fzf ]] && source ~/.bash_fzf
#hk
#hk     #-----
#hk     #
#hk     # File:     .bash_fzf
#hk     # Author:   Heiko Klausing (h.klausing@gmx.de)
#hk     # Created:  2017-04-08
#hk     #
#hk     # Fuzzy Finder Helper Functions
#hk     #
#hk     # Most of the functions are taken from https://github.com/junegunn/fzf/wiki/examples
#hk     #
#hk
#hk     skip=0
#hk     inst_package=0
#hk
#hk     # Check if fzf package is installed or a self compiled version is used
#hk     fzf_path=$(type -p fzf)
#hk
#hk     # Test if Fuzzy Finder is installed
#hk     if [[ -z ${fzf_path} ]]; then
#hk
#hk         fzf_path=/home/$USER/.fzf/bin
#hk         if [[ ! -f ${fzf_path}/fzf ]]; then
#hk
#hk             echo "fzf - FuZzy Finder not found."
#hk             skip=1
#hk
#hk         fi
#hk     fi
#hk
#hk     if [[ ${fzf_path} =~ usr ]]; then
#hk
#hk         inst_package=1
#hk
#hk     else
#hk
#hk         # If fzf is self compiled and existing than add directory to PATH
#hk         # ---------
#hk         if [[ ! "$PATH" == *${fzf_path}* ]]; then
#hk           export PATH="$PATH:${fzf_path}"
#hk         fi
#hk
#hk     fi
#hk
#hk
#hk     # Test if Fuzzy Finder TMUX is installed
#hk     if [[ -z "$(type -p fzf-tmux)" ]]; then
#hk         echo "fzf-tmux - FuZzy Finder TMUX not found."
#hk         skip=1
#hk     fi
#hk
#hk     # Setup fzf
#hk
#hk     #----------------------------
#hk     #
#hk     # Skip following commands if Fuzzy File Finder is not installed
#hk     #
#hk     if [[ $skip -eq 0 ]]; then
#hk
#hk         if [[ $inst_package -eq 1 ]]; then
#hk
#hk             if [[ -f /usr/share/fzf/completion.bash ]]; then
#hk                 source /usr/share/fzf/completion.bash 2> /dev/null
#hk             fi
#hk
#hk             if [[ -f /usr/share/fzf/completion.bash ]]; then
#hk                 source /usr/share/fzf/key-bindings.bash 2> /dev/null
#hk             fi
#hk
#hk         else
#hk
#hk             # Man path
#hk             # --------
#hk             if [[ ! "$MANPATH" == */home/$USER/.fzf/man* && -d "/home/USER/.fzf/man" ]]; then
#hk               export MANPATH="$MANPATH:/home/$USER/.fzf/man"
#hk             fi
#hk
#hk             # Auto-completion
#hk             # ---------------
#hk             [[ $- == *i* ]] && source "/home/$USER/.fzf/shell/completion.bash" 2> /dev/null
#hk
#hk             # Key bindings
#hk             # ------------
#hk             key_bindings=/usr/share/fzf/key-bindings.bash
#hk             if [[ ! -f ${key_bindings} ]]; then
#hk                 key_binding=/home/$USER/.fzf/shell/key-bindings.bash
#hk             fi
#hk             source "/home/$USER/.fzf/shell/key-bindings.bash"
#hk
#hk         fi
#hk
#hk
#hk         #----------------------------
#hk         # Opening files
#hk         #
#hk
#hk         # fze [FUZZY PATTERN] - Open the selected file(s) with the default editor
#hk         #   - Bypass fuzzy finder if there's only one match (--select-1)
#hk         #   - Exit if there's no match (--exit-0)
#hk         fze() {
#hk           local files
#hk           IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
#hk           [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
#hk         }
#hk
#hk
#hk
#hk         #----------------------------
#hk         # Changing directory
#hk         #
#hk
#hk         # fzgd - FuZzy Get Directory, print selected directory
#hk         fzgd() {
#hk           local dir
#hk           dir=$(find ${1:-.} -path '*/\.*' -prune \
#hk                           -o -type d -print 2> /dev/null | fzf +m) &&
#hk           echo -n "$dir"
#hk         }
#hk
#hk         # fzd - FuZzy Directory, cd to selected directory
#hk         fzd() {
#hk           local dir
#hk           dir=$(find ${1:-.} -path '*/\.*' -prune \
#hk                           -o -type d -print 2> /dev/null | fzf +m) &&
#hk           cd "$dir"
#hk         }
#hk
#hk         # fzda - FuZzy Directory Also dot, including hidden directories
#hk         fzda() {
#hk           local dir
#hk           dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
#hk         }
#hk
#hk         # fzdr - FuZzy Directory Recursive, cd to selected parent directory
#hk         fzdr() {
#hk           local declare dirs=()
#hk           get_parent_dirs() {
#hk             if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
#hk             if [[ "${1}" == '/' ]]; then
#hk               for _dir in "${dirs[@]}"; do echo $_dir; done
#hk             else
#hk               get_parent_dirs $(dirname "$1")
#hk             fi
#hk           }
#hk           local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
#hk           cd "$DIR"
#hk         }
#hk
#hk         # Suggested by @harelba and @dimonomid:
#hk
#hk         # fzcdf - FuZzy Change Directory to selected File
#hk         fzcdf() {
#hk            local file
#hk            local dir
#hk            file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
#hk         }
#hk
#hk
#hk         #----------------------------
#hk         # Command history
#hk         #
#hk
#hk         # fzh - Fuzzy History
#hk         fzh() {
#hk           eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
#hk         }
#hk
#hk
#hk
#hk         #----------------------------
#hk         # Processes
#hk         #
#hk
#hk         # fzkill - FuZzy KILL process
#hk         fzkill() {
#hk           local pid
#hk           pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
#hk
#hk           if [ "x$pid" != "x" ]
#hk           then
#hk             echo $pid | xargs kill -${1:-9}
#hk           fi
#hk         }
#hk
#hk
#hk         #----------------------------
#hk         # Git
#hk         #
#hk
#hk         # fzbr - FuZzy checkout git Branch (including remote branches)
#hk         fzbr() {
#hk           local branches branch
#hk           branches=$(git branch --all | grep -v HEAD) &&
#hk           branch=$(echo "$branches" |
#hk                    fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
#hk           git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
#hk         }
#hk
#hk
#hk         # fzco - FuZzy Checkout git Branch/Tag
#hk         fzcbt() {
#hk           local tags branches target
#hk           tags=$(
#hk             git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
#hk           branches=$(
#hk             git branch --all | grep -v HEAD             |
#hk             sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
#hk             sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
#hk           target=$(
#hk             (echo "$tags"; echo "$branches") |
#hk             fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
#hk           git checkout $(echo "$target" | awk '{print $2}')
#hk         }
#hk
#hk
#hk         # fzshow - FuZzy SHOW git commit browser
#hk         fzshow() {
#hk           git log --graph --color=always \
#hk               --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#hk           fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
#hk               --bind "ctrl-m:execute:
#hk                         (grep -o '[a-f0-9]\{7\}' | head -1 |
#hk                         xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#hk                         {}
#hk         FZF-EOF"
#hk         }
#hk
#hk
#hk         # fzcs - FuZzy get git Commit Sha values
#hk         # example usage: git rebase -i `fzcs`
#hk         fzcs() {
#hk           local commits commit
#hk           commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
#hk           commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
#hk           echo -n $(echo "$commit" | sed "s/ .*//")
#hk         }
#hk
#hk         # fzstash - FuZzy easier way to deal with sTASHes
#hk         # type fstash to get a list of your stashes
#hk         # enter shows you the contents of the stash
#hk         # ctrl-d shows a diff of the stash against your current HEAD
#hk         # ctrl-b checks the stash out as a branch, for easier merging
#hk         fzstash() {
#hk           local out q k sha
#hk           while out=$(
#hk             git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
#hk             fzf --ansi --no-sort --query="$q" --print-query \
#hk                 --expect=ctrl-d,ctrl-b);
#hk           do
#hk             mapfile -t out <<< "$out"
#hk             q="${out[0]}"
#hk             k="${out[1]}"
#hk             sha="${out[-1]}"
#hk             sha="${sha%% *}"
#hk             [[ -z "$sha" ]] && continue
#hk             if [[ "$k" == 'ctrl-d' ]]; then
#hk               git diff $sha
#hk             elif [[ "$k" == 'ctrl-b' ]]; then
#hk               git stash branch "stash-$sha" $sha
#hk               break;
#hk             else
#hk               git stash show -p $sha
#hk             fi
#hk           done
#hk         }
#hk
#hk
#hk         #----------------------------
#hk         # Tags
#hk         #
#hk
#hk         # fztags - FuZzy search cTAGS
#hk         fztags() {
#hk           local line
#hk           [ -e tags ] &&
#hk           line=$(
#hk             awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
#hk             cut -c1-80 | fzf --nth=1,2
#hk           ) && ${EDITOR:-vim} $(cut -f3 <<< "$line") -c "set nocst" \
#hk                                               -c "silent tag $(cut -f2 <<< "$line")"
#hk         }
#hk
#hk
#hk         #----------------------------
#hk         # vim
#hk         #
#hk
#hk         # Inspired by v. Opens files in ~/.viminfo
#hk
#hk         # fzv - FuZzy open files stored in ~/.viminfo with Vim
#hk         fzv() {
#hk           local files
#hk           files=$(grep '^>' ~/.viminfo | cut -c3- |
#hk                   while read line; do
#hk                     [ -f "${line/\~/$HOME}" ] && echo "$line"
#hk                   done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#hk         }
#hk
#hk         # fzgv - FuZzy open files stored in ~/.viminfo with GVim
#hk         fzgv() {
#hk           local files
#hk           files=$(grep '^>' ~/.viminfo | cut -c3- |
#hk                   while read line; do
#hk                     [ -f "${line/\~/$HOME}" ] && echo "$line"
#hk                   done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#hk         }
#hk
#hk
#hk         #----------------------------
#hk         # FZ-Helper overview
#hk         fzhelp() {
#hk             cat << "EOT"
#hk     fz-Helper Functions
#hk
#hk     ** Directory **
#hk     - fzcdf         FuZzy Change Directory to selected File
#hk     - fzd           FuZzy Directory, cd to selected directory
#hk     - fzda          FuZzy Directory Also dot, including hidden directories
#hk     - fzdr          FuZzy Directory Recursive, cd to selected parent directory
#hk     - fze [PATTERN] Open the selected file(s) with the default editor
#hk     - fzgd          FuZzy Get Directory, print selected directory
#hk
#hk     ** History **
#hk     - fzh           Fuzzy History
#hk
#hk     ** Kill Process **
#hk     - fzkill        FuZzy KILL process
#hk
#hk     ** Git **
#hk     - fzbr          FuZzy checkout git Branch (including remote branches)
#hk     - fzco          FuZzy Checkout git Branch/Tag
#hk     - fzcs          FuZzy get git Commit Sha values; example usage: git rebase -i `fzcs`
#hk     - fzshow        FuZzy SHOW git commit browser
#hk     - fzstash       FuZzy easier way to deal with sTASHes
#hk
#hk     ** Ctags **
#hk     - fztags        FuZzy search cTAGS
#hk
#hk     ** vim/gim **
#hk     - fzgv          FuZzy open files stored in ~/.viminfo with GVim
#hk     - fzv           FuZzy open files stored in ~/.viminfo with Vim
#hk     EOT
#hk         }
#hk
#hk     fi      # if [[ $skip -eq 0 ]]; then
#hk
#hk
#hk
#hk     # vim: filetype=sh
#hk
#hk #-----
#hk
#hk
#hk
#hk
#hk     [[ -r ~/.fzf.bash ]] && source ~/.fzf.bash
#hk
#hk fi


# vim: set filetype=bash:
